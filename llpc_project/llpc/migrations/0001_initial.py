# Generated by Django 5.2 on 2025-04-19 07:58

import django.core.validators
import django.db.models.deletion
import django_countries.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Laboratory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('leader', models.CharField(max_length=200)),
                ('lab_type', models.CharField(choices=[('HOSPITAL', 'Kliniklabor'), ('PRIVATE', 'Privatlabor'), ('UNIVERSITY', 'Universitätslabor'), ('OTHER', 'Sonstiges')], max_length=20)),
                ('street', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(blank=True, max_length=200)),
                ('zip_code', models.CharField(blank=True, max_length=10)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('referral_type', models.CharField(choices=[('INTERNAL', 'Nur interne Aufträge'), ('EXT_INT', 'Interne und externe Aufträge'), ('EXTERNAL', 'Nur externe Aufträge')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Laboratorien',
            },
        ),
        migrations.CreateModel(
            name='LaboratoryUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(upload_to='lab_uploads/')),
                ('processed', models.BooleanField(default=False)),
                ('year', models.IntegerField()),
                ('laboratory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='llpc.laboratory')),
            ],
        ),
        migrations.CreateModel(
            name='ParameterEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loinc_code', models.CharField(max_length=20)),
                ('parameter_name', models.CharField(max_length=200)),
                ('material', models.CharField(choices=[('blood', 'Blut'), ('urine', 'Harn'), ('csf', 'Liquor'), ('punctate', 'Punktat'), ('swab', 'Abstrich'), ('stool', 'Stuhl'), ('tissue', 'Gewebe'), ('other', 'Sonstiges')], max_length=50)),
                ('preanalytical', models.IntegerField(choices=[(0, 'Konzept nicht anwendbar'), (1, 'Vollautomatisierte Probenverarbeitung'), (4, 'Teilautomatisierte Probenverarbeitung'), (9, 'Manuelle Probenverarbeitung')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9)])),
                ('analytical', models.IntegerField(choices=[(0, 'Vollautomatisiert (kein Aufwand)'), (1, 'Manueller Aufwand sehr gering (<15 min)'), (3, 'Manueller Aufwand gering (<1h)'), (5, 'Manueller Aufwand mittel (1-2h)'), (7, 'Manueller Aufwand hoch (2-4h)'), (9, 'Manueller Aufwand sehr hoch (>4h)')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9)])),
                ('expertise', models.IntegerField(choices=[(0, 'Konzept nicht anwendbar'), (1, 'Techniker mit Grundkenntnissen'), (4, 'Techniker mit erweiterten Laborkenntnissen'), (9, 'Techniker mit Spezialkenntnissen')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9)])),
                ('postanalytical', models.IntegerField(choices=[(0, 'Konzept nicht anwendbar'), (1, 'Kein Aufwand'), (2, 'Technische Plausibilitätskontrolle notwendig'), (3, 'Potentieller Reflextest'), (5, 'Zusätzliche analytische Interpretation notwendig'), (6, 'Potentielle reflektive Testung'), (7, 'Potentielle reflektive Testung nach Rücksprache'), (8, 'Experteninterpretation notwendig'), (9, 'Experteninterpretation mit erweiterter Expertise notwendig')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9)])),
                ('administrative', models.IntegerField(choices=[(0, 'Konzept nicht anwendbar'), (1, 'Automatische Berechnung'), (2, 'Automatische schriftliche Interpretation'), (3, 'Zusätzliche Analyse nicht notwendig'), (5, 'Manuelle Übertragung/Berechnung in LIS/EHR'), (6, 'Individuelle schriftliche Interpretation'), (7, 'Direkter Kontakt zum Kliniker notwendig')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)])),
                ('invasiveness', models.IntegerField(choices=[(0, 'Konzept nicht anwendbar'), (1, 'Nicht invasiv'), (2, 'Minimal invasiv'), (3, 'Venenpunktion'), (4, 'Arterienpunktion'), (5, 'Punktion von Körperhöhlen oder Knochenmark'), (6, 'Punktion des ZNS'), (7, 'Endoskopische Probenentnahme (ohne Anästhesie)'), (8, 'Endoskopische Probenentnahme (mit Anästhesie)'), (9, 'Chirurgische Probenentnahme')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9)])),
                ('time_required', models.IntegerField(choices=[(0, 'Konzept nicht anwendbar'), (1, '<1 Stunde'), (4, '1-6 Stunden'), (6, '6-12 Stunden'), (9, '>12 Stunden')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9)])),
                ('is_approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_evaluations', to=settings.AUTH_USER_MODEL)),
                ('submitted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ParameterVolume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loinc_code', models.CharField(max_length=20)),
                ('month', models.IntegerField()),
                ('year', models.IntegerField()),
                ('volume', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('laboratory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='llpc.laboratory')),
                ('upload', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='llpc.laboratoryupload')),
            ],
            options={
                'unique_together': {('laboratory', 'loinc_code', 'year')},
            },
        ),
        migrations.CreateModel(
            name='BenchmarkingResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.FloatField()),
                ('percentile_rank', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('laboratory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='llpc.laboratory')),
                ('evaluation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='llpc.parameterevaluation')),
                ('volume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='llpc.parametervolume')),
            ],
        ),
    ]
